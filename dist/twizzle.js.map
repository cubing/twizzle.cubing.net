{"version":3,"sources":["webpack://twizzle/webpack/universalModuleDefinition","webpack://twizzle/webpack/bootstrap","webpack://twizzle/external \"twisty\"","webpack://twizzle/external \"puzzle-geometry\"","webpack://twizzle/external \"alg\"","webpack://twizzle/external \"kpuzzle\"","webpack://twizzle/./src/app.ts","webpack://twizzle/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","puzzle","movenames","grips","descinput","algoinput","actions","lastRender","gripdepth","safeKsolve","lastval","lastalgo","scramble","renderOptions","workOptions","getCheckbox","a","document","getElementById","checked","getCheckboxes","length","noticeClick","e","svg","stopPropagation","preventDefault","pt","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","dist","gripind","undefined","Math","hypot","gripname","shiftKey","toLowerCase","ctrlKey","metaKey","mv","mod","oldalg","external_alg_","newmv","nestedUnits","lastmv","thismv","family","outerLayer","innerLayer","newAmount","amount","newArr","slice","checkchange","domove","which","addClickMoves","onclick","oncontextmenu","trimEq","b","trim","setAlgo","str","writeback","seq","elem","querySelector","textContent","external_twisty_","alg","anim","skipToEnd","showtext","wnd","window","open","write","replace","close","gettextwriter","dowork","cmd","options","checkboxes","allmoves","push","vertexmoves","corners","edges","centers","optimize","blockmoves","killori","external_puzzle_geometry_","parsedesc","pg","allstickers","genperms","writegap","gtw","as","getOrbitsDef","reassemblySize","schreiersims","getMovesAsPerms","showcanon","writeksolve","generatesvg","alert","el","el2","style","display","descarg","algo","newRender","renderSame","equalCheckboxes","savealg","ksolvetext","text","baseplanerot","stickersperface","cubies","shortedge","edgedistance","vertexdistance","title","ksolvemovenames","threed","svggrips","ksolve","savealgo","external_kpuzzle_","mps","movesetgeos","worker","setFaceNames","facenames","map","_","grip1","grip2","addGrip","backgroundColor","_a","console","log","LucasSetup","toparse","doaction","target","selectedIndex","doselection","getQueryParam","qs","location","search","val","RegExp","exec","decodeURIComponent","setup","select","puzzledesc","getpuzzles","puz","puzdesc","found","opt","createElement","innerHTML","selected","add","onchange","commands","qalg","decodealg","setInterval","addEventListener","__webpack_exports__"],"mappings":"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","file":"twizzle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"twisty\"), require(\"puzzle-geometry\"), require(\"alg\"), require(\"kpuzzle\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"twisty\", \"puzzle-geometry\", \"alg\", \"kpuzzle\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twizzle\"] = factory(require(\"twisty\"), require(\"puzzle-geometry\"), require(\"alg\"), require(\"kpuzzle\"));\n\telse\n\t\troot[\"twizzle\"] = factory(root[\"twisty\"], root[\"puzzle-geometry\"], root[\"alg\"], root[\"kpuzzle\"]);\n})(typeof self !== \"undefined\" ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import { Twisty } from \"twisty\"\nimport { PuzzleGeometry, SchreierSims } from \"puzzle-geometry\"\nimport { SiGNMove, Sequence, algToString, parse as algparse} from \"alg\"\nimport { KPuzzle, KPuzzleDefinition, parse } from \"kpuzzle\"\n\nvar twisty:Twisty ;\nvar puzzle:KPuzzleDefinition ;\nvar safeKsolve:string = \"\" ;\nvar movenames:Array<string> ;\nvar grips:Array<any> ;\nvar descinput:HTMLInputElement ;\nvar algoinput:HTMLInputElement ;\nvar actions:HTMLSelectElement ;\nvar lastval:string = \"\" ;\nvar lastalgo:string = \"\" ;\nvar scramble:number = 0 ;\nvar renderOptions = [\"threed\", \"centers\", \"edges\", \"corners\",\n                \"centers\", \"edges\", \"corners\", \"blockmoves\", \"vertexmoves\"] ;\nvar workOptions = [\"centers\", \"edges\", \"corners\", \"optimize\", \"blockmoves\",\n      \"allmoves\", \"vertexmoves\", \"killori\"] ;\nvar lastRender:any ;\nvar gripdepth:any ;\nfunction getCheckbox(a:string):boolean {\n   return (<HTMLInputElement>document.getElementById(a)).checked ;\n}\nfunction getCheckboxes(a:Array<string>):any {\n   var r:any = {} ;\n   for (var i=0; i<a.length; i++)\n      r[a[i]] = getCheckbox(a[i]) ;\n   return r ;\n}\nfunction equalCheckboxes(a:Array<string>, b:any, c:any):boolean {\n   for (var i=0; i<a.length; i++)\n      if (b[a[i]] != c[a[i]])\n         return false ;\n   return true ;\n}\nfunction focusRight() {\n   return ;\n   algoinput.scrollLeft = algoinput.scrollWidth ;\n   algoinput.focus() ;\n   algoinput.selectionStart = algoinput.selectionEnd = 100000000 ;\n}\nfunction domove(mv:string, mod:number) {\n   try { // try to merge this move\n      var oldalg = algparse((algoinput.value)) ;\n      var newmv = algparse((mv)) ;\n      if (oldalg instanceof Sequence && newmv instanceof Sequence &&\n          newmv.nestedUnits.length == 1 && oldalg.nestedUnits.length > 0) {\n         var lastmv = oldalg.nestedUnits[oldalg.nestedUnits.length-1] ;\n         var thismv = newmv.nestedUnits[0] ;\n         if (lastmv instanceof SiGNMove && thismv instanceof SiGNMove &&\n             lastmv.family == thismv.family &&\n             lastmv.outerLayer == thismv.outerLayer &&\n             lastmv.innerLayer == thismv.innerLayer) {\n            var newAmount = thismv.amount + lastmv.amount ;\n            var newArr = oldalg.nestedUnits.slice() ;\n            if (newAmount == 0 || (mod > 0 && newAmount % mod == 0)) {\n               newArr.length -= 1 ;\n            } else {\n               // canonicalize the representation\n               while (newAmount + newAmount > mod)\n                  newAmount -= mod ;\n               while (newAmount + newAmount <= -mod)\n                  newAmount += mod ;\n               newArr[oldalg.nestedUnits.length-1] =\n                 new SiGNMove(lastmv.outerLayer, lastmv.innerLayer,\n                              lastmv.family, newAmount) ;\n            }\n            algoinput.value = (algToString(new Sequence(newArr))) ;\n            focusRight() ;\n            checkchange() ;\n            return ;\n         }\n      }\n   } catch (e) { }\n   algoinput.value += ' ' + (mv) ;\n   focusRight() ;\n   checkchange() ;\n}\nfunction noticeClick(e:any) {\n   var svg:any = document.getElementById(\"svg\") ;\n   if (!svg || !e)\n      return false ;\n   e.stopPropagation() ;\n   e.preventDefault() ;\n   var pt = svg.createSVGPoint() ;\n   pt.x = e.clientX ;\n   pt.y = e.clientY;\n   pt = pt.matrixTransform(svg.getScreenCTM().inverse());\n   var dist = 1000000 ;\n   var gripind = undefined ;\n   for (var i=0; i<grips.length; i++) {\n      var d = Math.hypot(grips[i][0]-pt.x, grips[i][1]-pt.y) ;\n      if (d < dist) {\n         dist = d ;\n         gripind = i ;\n      }\n   }\n   if (gripind != undefined) {\n      var gripname = grips[gripind][2] ;\n      if (e.shiftKey) {\n         if (getCheckbox(\"blockmoves\"))\n            gripname = gripname.toLowerCase() ;\n         else\n            gripname = \"2\" + gripname ;\n      } else if ((e.ctrlKey || e.metaKey) && gripdepth[gripname])\n         gripname = \"\" + gripdepth[gripname] + gripname.toLowerCase() ;\n      domove(gripname + (e.which == 3 ? \"\" : \"'\"), grips[gripind][3]) ;\n   }\n   return false ;\n}\nfunction addClickMoves() {\n   var svg = document.getElementById(\"svg\") ;\n   if (svg && !svg.onclick)\n      svg.onclick = function(e){return noticeClick(e)}\n   if (svg && !svg.oncontextmenu)\n      svg.oncontextmenu = function(e){return noticeClick(e)}\n}\nfunction LucasSetup(pg:PuzzleGeometry, ksolve:string, svg:string,\n                    savealgo:boolean) {\n   safeKsolve = ksolve ; // this holds the scrambled position\n   puzzle = parse(ksolve) ;\n   var mps = pg.movesetgeos ;\n   var worker = new KPuzzle(puzzle) ;\n   worker.setFaceNames(pg.facenames.map((_:any)=>_[1])) ;\n   gripdepth = {} ;\n   for (var i=0; i<mps.length; i++) {\n      var grip1 = mps[i][0] as string ;\n      var grip2 = mps[i][2] as string ;\n      // angle compatibility hack\n      worker.addGrip(grip1, grip2, mps[i][4] as number) ;\n      gripdepth[grip1] = mps[i][4] ;\n      gripdepth[grip2] = mps[i][4] ;\n   }\n   puzzle.svg = svg ;\n   // TODO: Create the alg semantically.\n   //\n   // This requires knowing that a move like 2R generated by `puzzlegeometry`\n   // represents BareSiGNMove(\"R\", 2) rather than LayerSiGNMove(2, \"R\").\n   algoinput.style.backgroundColor = '' ;\n   if (savealgo && !trimEq(lastalgo, \"\")) {\n      try {\n         setAlgo(lastalgo, true);\n      } catch {\n console.log(\"Could not parse \" + lastalgo) ;\n         algoinput.style.backgroundColor = '#ff8080' ;\n      }\n   } else\n      setAlgo(\"\", true) ;\n   addClickMoves() ;\n}\nfunction trimEq(a:string, b:string) {\n   return a.trim() == b.trim() ;\n}\nfunction setAlgo(str:string, writeback:boolean) {\n   var seq:Sequence ;\n   if (str.trim().length == 0) {\n      seq = algparse(movenames[0]+\"60\") ;\n      str = \"\" ;\n   } else {\n      seq = algparse(str) ;\n      str = algToString(seq) ;\n   }\n   var elem = document.querySelector(\"#custom-example\");\n   if (elem) {\n      elem.textContent = \"\" ;\n //      This kills full screen.\n      twisty = new Twisty(elem, {\n        puzzle: puzzle,\n        alg: seq\n      });\n      (twisty as any).anim.skipToEnd() ;\n      if (writeback) {\n         algoinput.value = (str) ;\n         lastalgo = str ;\n      }\n   }\n}\n// this is so horrible.  there has to be a better way.\nfunction showtext(s:string) {\n   var wnd = window.open(\"\",\"_blank\");\n   if (wnd) {\n      wnd.document.open(\"text/plain\",\"replace\") ;\n      wnd.document.write(\"<pre>\") ;\n      s = s.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\") ;\n      wnd.document.write(s) ;\n      wnd.document.write(\"</pre>\") ;\n      wnd.document.close() ;\n   }\n}\nfunction gettextwriter():(s:string)=>void {\n   var wnd = window.open(\"\",\"_blank\");\n   if (wnd) {\n      wnd.document.open(\"text/plain\",\"replace\") ;\n      wnd.document.write(\"<pre>\") ;\n      return function(s:string):void {\n         s = s.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\") ;\n         if (wnd && wnd.document)\n            wnd.document.write(s + \"\\n\") ;\n      }\n   }\n   throw \"Could not open window\" ;\n}\nfunction dowork(cmd:string) {\n   if (cmd == \"scramble\") {\n      scramble = 1 ;\n      checkchange() ;\n      return ;\n   }\n   if (cmd == \"reset\") {\n      scramble = -1 ;\n      checkchange() ;\n      return ;\n   }\n   if (cmd == \"help\") {\n      window.open(\"Help.html\", \"Twizzle Help\");\n      return ;\n   }\n   if (cmd == \"options\") {\n      var el = document.getElementById('optionsspan') ;\n      var el2 = document.getElementById('data') ;\n      if (el && el2) {\n         if (el.style.display != 'none') {\n            el.style.display = 'none' ;\n            el2.style.display = 'none' ;\n         } else {\n            el.style.display = 'inline' ;\n            el2.style.display = 'inline' ;\n         }\n      }\n      return ;\n   }\n   var options:Array<number|string|boolean> = [] ;\n   var checkboxes = getCheckboxes(workOptions) ;\n   if (checkboxes.allmoves)\n      options.push(\"allmoves\", true) ;\n   if (checkboxes.vertexmoves)\n      options.push(\"vertexmoves\", true) ;\n   if (!checkboxes.corners)\n      options.push(\"cornersets\", false) ;\n   if (!checkboxes.edges)\n      options.push(\"edgesets\", false) ;\n   if (!checkboxes.centers)\n      options.push(\"centersets\", false) ;\n   if (checkboxes.optimize)\n      options.push(\"optimize\", true) ;\n   if (checkboxes.blockmoves)\n      options.push(\"outerblockmoves\", true) ;\n   if (checkboxes.killori)\n      options.push(\"killorientation\", true) ;\n   var p = PuzzleGeometry.parsedesc(descinput.value) ;\n   var pg = new PuzzleGeometry(p[0], p[1], options) ;\n   pg.allstickers() ;\n   pg.genperms() ;\n   if (cmd == \"gap\") {\n      showtext(pg.writegap()) ;\n   } else if (cmd == \"ss\") {\n      var gtw = gettextwriter() ;\n      var os = pg.getOrbitsDef(false) ;\n      var as = os.reassemblySize() ;\n      gtw(\"Reassembly size is \" + as) ;\n      var ss = SchreierSims.schreiersims(pg.getMovesAsPerms(), gtw) ;\n      var r = as / ss ;\n      gtw(\"Ratio is \" + r) ;\n   } else if (cmd == \"canon\") {\n      pg.showcanon(gettextwriter()) ;\n   } else if (cmd == \"ksolve\") {\n      showtext(pg.writeksolve(\"TwizzlePuzzle\", false)) ;\n   } else if (cmd == \"svgcmd\") {\n      showtext(pg.generatesvg(800, 500, 10, getCheckbox(\"threed\"))) ;\n   } else {\n      alert(\"Command \" + cmd + \" not handled yet.\") ;\n   }\n}\nfunction checkchange() {\n   // for some reason we need to do this repeatedly\n   addClickMoves() ;\n   var descarg = descinput.value ;\n   if (descarg == null)\n      return ;\n   var algo = (algoinput.value) ;\n   if (algo == null)\n      return ;\n   var newRender = getCheckboxes(renderOptions) ;\n   var renderSame = trimEq(descarg, lastval) &&\n                     equalCheckboxes(renderOptions, lastRender, newRender) ;\n   if (scramble == 0 && trimEq(algo, lastalgo) && renderSame)\n      return ;\n   if (scramble != 0 || lastval != descarg || !renderSame) {\n      var savealg = true ;\n      lastval = descarg ;\n      lastRender = newRender ;\n      var p = PuzzleGeometry.parsedesc(descarg) ;\n      if (p) {\n         var options:Array<string|number|boolean> = [\"allmoves\", true] ;\n         if (!lastRender.corners)\n            options.push(\"cornersets\", false) ;\n         if (!lastRender.edges)\n            options.push(\"edgesets\", false) ;\n         if (!lastRender.centers)\n            options.push(\"centersets\", false) ;\n         if (scramble != 0) {\n            if (scramble > 0)\n               options.push(\"scramble\", 1) ;\n            scramble = 0 ;\n            algo = \"\" ;\n            safeKsolve = \"\" ;\n            savealg = false ;\n         }\n         var pg = new PuzzleGeometry(p[0], p[1], options) ;\n         pg.allstickers() ;\n         pg.genperms() ;\n         var sep = \"\\n\" ;\n         var text =\n            \"Faces \" + pg.baseplanerot.length + sep +\n            \"Stickers per face \" + pg.stickersperface + sep +\n            \"Cubies \" + pg.cubies.length + sep +\n            \"Short edge \" + pg.shortedge + sep +\n            \"Edge distance \" + pg.edgedistance + sep +\n            \"Vertex distance \" + pg.vertexdistance ;\n         var el = document.getElementById('data') ;\n         if (el)\n            el.title = text ;\n         var ksolvetext:string ;\n         if (renderSame && safeKsolve != \"\") {\n            ksolvetext = safeKsolve ;\n         } else {\n            ksolvetext = pg.writeksolve(\"TwizzlePuzzle\", true) ;\n            movenames = pg.ksolvemovenames ;\n         }\n         var svg = pg.generatesvg(800, 500, 10, lastRender.threed) ;\n         grips = pg.svggrips ;\n         LucasSetup(pg, ksolvetext, svg, savealg) ;\n      }\n      if (!savealg) {\n         lastalgo = \"\" ;\n         algo = (algoinput.value) ;\n      }\n   }\n   if (!trimEq(lastalgo, algo)) {\n      lastalgo = algo ;\n      algoinput.style.backgroundColor = '' ;\n      var toparse = \"\" ;\n      if (algo.trim().length > 0) {\n         toparse = algo ;\n      } else {\n         toparse = \"\" ;\n      }\n      if (puzzle) {\n         try {\n            setAlgo(toparse, false) ;\n         } catch (e) {\n console.log(\"Could not parse \" + toparse) ;\n            algoinput.style.backgroundColor = '#ff8080' ;\n            return ;\n         }\n      }\n   }\n}\nfunction doaction(el:any) {\n   var s = el.target.value ;\n   if (s != \"\") {\n      actions.selectedIndex = 0 ;\n      dowork(s) ;\n   }\n}\nfunction doselection(el:any) {\n   if (el.target.value != '') {\n      descinput.value = el.target.value ;\n      checkchange() ;\n   }\n}\nfunction getQueryParam(name:string):string {\n   var qs = window.location.search ;\n   var re = new RegExp('[&?]' + name + '=([^&#]*)') ;\n   var val = re.exec(qs) ;\n   if (!val || !val[1])\n      return '' ;\n   return decodeURIComponent(val[1].replace(/\\+/g, ' ')) ;\n}\n// treat - as ', and _ as ' ', in algorithms\nfunction decodealg(s:string) {\n   return s.replace(/-/g, \"'\").replace(/_/g, \" \") ;\n}\n// encode ' as -, and ' ' as _, in algorithms\n/* not used yet\nfunction encodealg(s:string) {\n   return s.replace(/ /g, \"_\").replace(/'/g, \"-\") ;\n}\n */\nexport function setup() {\n   var select = <HTMLSelectElement>document.getElementById('puzzleoptions') ;\n   descinput = <HTMLInputElement>document.getElementById('desc') ;\n   algoinput = <HTMLInputElement>document.getElementById('algorithm') ;\n   var puzzledesc = PuzzleGeometry.getpuzzles() ;\n   lastRender = getCheckboxes(renderOptions) ;\n   var puz = getQueryParam('puzzle') ;\n   var puzdesc = getQueryParam('puzzlegeometry') ;\n   var found = false ;\n   for (var i=0; i<puzzledesc.length; i += 2) {\n      var opt = <HTMLOptionElement>document.createElement(\"option\") ;\n      opt.value = puzzledesc[i] ;\n      opt.innerHTML = puzzledesc[i+1] ;\n      if (puzdesc == '' && puz == puzzledesc[i+1]) {\n         opt.selected = true ;\n         descinput.value = puzzledesc[i] ;\n         found = true ;\n      }\n      select.add(opt) ;\n   }\n   if (puzdesc != '') {\n      select.selectedIndex = 0 ;\n      descinput.value = puzdesc ;\n   } else if (!found) {\n      for (var i=0; i<puzzledesc.length; i += 2) {\n         if (puzzledesc[i+1] == '3x3x3') {\n            select.selectedIndex = 1 + i / 2 ;\n            descinput.value = puzzledesc[i] ;\n         }\n      }\n   }\n   select.onchange = doselection ;\n   actions = <HTMLSelectElement>document.getElementById('action') ;\n   actions.onchange = doaction ;\n   var commands = [\"scramble\", \"help\", \"reset\", \"options\"] ;\n   for (var i=0; i<commands.length; i++)\n      (<HTMLInputElement>document.getElementById(commands[i])).onclick =\n         function(cmd){return function(){dowork(cmd)}}(commands[i]) ;\n   var qalg = getQueryParam('alg') ;\n   qalg = decodealg(qalg) ;\n   if (qalg != '') {\n      algoinput.value = qalg ;\n      lastalgo = qalg ;\n   }\n   checkchange() ;\n   setInterval(checkchange, 0.5) ;\n}\nwindow.addEventListener(\"load\", setup);\n","export {\n   setup\n} from \"./app\"\n"],"sourceRoot":""}