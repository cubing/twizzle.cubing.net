import { Perm } from "./Perm";
export declare class OrbitDef {
    size: number;
    mod: number;
    constructor(size: number, mod: number);
    reassemblySize(): number;
}
export declare class OrbitsDef {
    orbitnames: Array<string>;
    orbitdefs: Array<OrbitDef>;
    solved: VisibleState;
    movenames: Array<string>;
    moveops: Array<Transformation>;
    constructor(orbitnames: Array<string>, orbitdefs: Array<OrbitDef>, solved: VisibleState, movenames: Array<string>, moveops: Array<Transformation>);
    toKsolve(name: string, forTwisty: boolean): Array<string>;
    optimize(): OrbitsDef;
    scramble(n: number): void;
    reassemblySize(): number;
}
export declare class Orbit {
    perm: Array<number>;
    ori: Array<number>;
    orimod: number;
    constructor(perm: Array<number>, ori: Array<number>, orimod: number);
    mul(b: Orbit): Orbit;
    inv(): Orbit;
    equal(b: Orbit): boolean;
    killOri(): this;
    toPerm(): Perm;
    identicalPieces(): Array<Array<number>>;
    order(): number;
    static e(n: number, mod: number): Orbit;
    isIdentity(): boolean;
    remap(no: Array<number>, on: Array<number>, nv: number): Orbit;
    remapVS(no: Array<number>, nv: number): Orbit;
    toKsolveVS(): Array<string>;
    toKsolve(): Array<string>;
}
export declare class TransformationBase {
    orbits: Array<Orbit>;
    constructor(orbits: Array<Orbit>);
    internalMul(b: TransformationBase): Array<Orbit>;
    internalInv(): Array<Orbit>;
    equal(b: TransformationBase): boolean;
    killOri(): this;
    toPerm(): Perm;
    identicalPieces(): Array<Array<number>>;
    order(): number;
}
export declare class Transformation extends TransformationBase {
    constructor(orbits: Array<Orbit>);
    mul(b: Transformation): Transformation;
    mulScalar(n: number): Transformation;
    inv(): Transformation;
    e(): Transformation;
}
export declare class VisibleState extends TransformationBase {
    constructor(orbits: Array<Orbit>);
    mul(b: Transformation): VisibleState;
}
export declare function showcanon(g: OrbitsDef, disp: (s: string) => void): void;
export declare function showcanon0(g: OrbitsDef, disp: (s: string) => void): void;
