export declare class Quat {
    static eps: number;
    a: number;
    b: number;
    c: number;
    d: number;
    constructor(a_: number, b_: number, c_: number, d_: number);
    mul(q: Quat): Quat;
    toString(): string;
    dist(q: Quat): number;
    len(): number;
    cross(q: Quat): Quat;
    dot(q: Quat): number;
    normalize(): Quat;
    makenormal(): Quat;
    normalizeplane(): Quat;
    smul(m: number): Quat;
    sum(q: Quat): Quat;
    sub(q: Quat): Quat;
    angle(): number;
    invrot(): Quat;
    det3x3(a00: number, a01: number, a02: number, a10: number, a11: number, a12: number, a20: number, a21: number, a22: number): number;
    rotateplane(q: Quat): Quat;
    rotatepoint(q: Quat): Quat;
    rotateface(face: Array<Quat>): Array<Quat>;
    rotatecubie(cubie: Array<Array<Quat>>): Array<Array<Quat>>;
    intersect3(p2: Quat, p3: Quat): false | Quat;
    solvethreeplanes(p1: number, p2: number, p3: number, planes: Array<Quat>): any;
    side(x: number): number;
    cutfaces(faces: Array<Array<Quat>>): Array<Array<Quat>>;
    faceside(face: Array<Quat>): number;
    static expandfaces(rots: Array<Quat>, faces: Array<Array<Quat>>): Array<Array<Quat>>;
    sameplane(p: Quat): boolean;
    static centermassface(face: Array<Quat>): Quat;
    makecut(r: number): Quat;
    static random(): Quat;
}
