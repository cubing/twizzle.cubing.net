import { Quat } from "./Quat";
import { Perm } from "./Perm";
import { OrbitsDef } from "./PermOriSet";
export declare class PuzzleGeometry {
    static eps: number;
    static copyright: string;
    args: string;
    rotations: Array<Quat>;
    baseplanerot: Array<Quat>;
    baseplanes: Array<Quat>;
    facenames: Array<any>;
    faceplanes: any;
    edgenames: Array<any>;
    vertexnames: Array<any>;
    geonormals: Array<any>;
    moveplanes: Array<Quat>;
    moveplanesets: Array<any>;
    movesetorders: Array<any>;
    movesetgeos: Array<any>;
    faces: Array<Array<Quat>>;
    basefacecount: number;
    stickersperface: number;
    cornerfaces: number;
    cubies: Array<any>;
    shortedge: number;
    vertexdistance: number;
    edgedistance: number;
    orbits: number;
    facetocubies: Array<any>;
    moverotations: Array<Array<Quat>>;
    cubiekey: any;
    cubiekeys: Array<string>;
    facelisthash: any;
    cubiesetnames: Array<any>;
    cubieords: Array<number>;
    cubiesetnums: Array<number>;
    cubieordnums: Array<number>;
    orbitoris: Array<number>;
    cubievaluemap: Array<number>;
    cubiesetcubies: Array<Array<number>>;
    movesbyslice: Array<any>;
    cmovesbyslice: Array<any>;
    verbose: number;
    allmoves: boolean;
    outerblockmoves: boolean;
    vertexmoves: boolean;
    movelist: any;
    parsedmovelist: any;
    cornersets: boolean;
    centersets: boolean;
    edgesets: boolean;
    killorientation: boolean;
    optimize: boolean;
    scramble: number;
    ksolvemovenames: Array<string>;
    fixPiece: string;
    fixedCubie: number;
    svggrips: Array<any>;
    static defaultnets: any;
    net: any;
    static defaultcolors: any;
    colors: any;
    static defaultfaceorders: any;
    faceorder: any;
    faceprecedence: Array<number>;
    constructor(shape: string, cuts: Array<Array<string>>, optionlist: Array<any> | undefined);
    static findelement(a: Array<any>, p: Quat): number;
    splitByFaceNames(s: string, facenames: Array<any>): Array<string>;
    create(shape: string, cuts: Array<any>): void;
    keyface(face: Array<Quat>): string;
    findcubie(face: Array<Quat>): number;
    findface(face: Array<Quat>): number;
    project2d(facen: number, edgen: number, targvec: Array<Quat>): any;
    allstickers(): void;
    spinmatch(a: string, b: string): boolean;
    parsemove(mv: string): any;
    genperms(): void;
    getfaces(): Array<Array<Array<number>>>;
    getboundarygeometry(): any;
    getmovesets(k: number): any;
    skipbyori(cubie: number): boolean;
    skipcubie(set: Array<number>): boolean;
    skipset(set: Array<number>): boolean;
    header(comment: string): string;
    writegap(): string;
    getmovename(geo: any, bits: number, slices: number): any;
    writeksolve(name: string, fortwisty: boolean): string;
    getOrbitsDef(fortwisty: boolean): OrbitsDef;
    getMovesAsPerms(): Array<Perm>;
    showcanon(disp: (s: string) => void): void;
    getsolved(): Perm;
    static getpuzzles(): Array<string>;
    static parsedesc(s: string): any;
    generatesvg(w: number, h: number, trim: number, threed: boolean): string;
}
